#!/usr/bin/env python
import os
import sys
import django
from django.test import Client
from django.conf import settings

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lab1.settings')

try:
    django.setup()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Django: {e}")
    sys.exit(1)

settings.ALLOWED_HOSTS.extend(['testserver', 'localhost', '127.0.0.1'])

def run_test(test_func, test_name):
    try:
        test_func()
        print(f"   ‚úÖ {test_name} - OK")
        return True
    except Exception as e:
        print(f"   ‚ùå {test_name} - –û—à–∏–±–∫–∞: {e}")
        return False

def test_lab():
    client = Client()
    tests_passed = 0
    total_tests = 0

    print("üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã...\n")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (runserver) –ù–ï –∑–∞–ø—É—â–µ–Ω!\n")

    tests = [
        {
            'name': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            'func': lambda: test_main_page(client),
            'points': 1
        },
        {
            'name': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–∏–≥–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)',
            'func': lambda: test_existing_book(client),
            'points': 1
        },
        {
            'name': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–∏–≥–∏ (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è, 404)',
            'func': lambda: test_nonexistent_book(client),
            'points': 1
        },
        {
            'name': '–ü–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
            'func': lambda: test_search_with_params(client),
            'points': 1
        },
        {
            'name': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã –∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è',
            'func': lambda: test_theme_redirect(client),
            'points': 1
        },
        {
            'name': '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è (re_path)',
            'func': lambda: test_review_detail(client),
            'points': 2
        }
    ]

    for test in tests:
        total_tests += 1
        print(f"{total_tests}. {test['name']}...")
        if run_test(test['func'], test['name']):
            tests_passed += 1

    print("\n" + "="*60)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if tests_passed == total_tests:
        print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –ú–æ–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å!")
    else:
        print(f"üò• –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_tests - tests_passed}")
        print("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ß–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.")
    print("="*60)

    return tests_passed == total_tests

def test_main_page(client):
    """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    response = client.get('/')
    assert response.status_code == 200, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}, –æ–∂–∏–¥–∞–ª—Å—è 200"
    content = response.content.decode('utf-8')
    assert "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–π—Ç–∞" in content, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π"

def test_existing_book(client):
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏"""
    response = client.get('/book/1/')
    assert response.status_code == 200, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}, –æ–∂–∏–¥–∞–ª—Å—è 200"
    content = response.content.decode('utf-8')
    assert "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞" in content, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏. –ö–æ–Ω—Ç–µ–Ω—Ç: {content}"

def test_nonexistent_book(client):
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏"""
    response = client.get('/book/999/')
    assert response.status_code == 404, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}, –æ–∂–∏–¥–∞–ª—Å—è 404"
    content = response.content.decode('utf-8')
    assert "–ö–Ω–∏–≥–∏ –Ω–µ—Ç" in content, f"–ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞"

def test_search_with_params(client):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    response = client.get('/search/?q=–¢–æ–ª—Å—Ç–æ–π&type=author')
    assert response.status_code == 200
    content = response.content.decode('utf-8')
    assert "–¢–æ–ª—Å—Ç–æ–π" in content and "author" in content, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"
    response2 = client.get('/search/')
    assert response2.status_code == 200

def test_theme_redirect(client):
    """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã –∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏"""
    response = client.get('/set_theme/?color=dark', follow=True)
    assert len(response.redirect_chain) > 0, "–ù–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏"
    assert response.status_code == 200
    content = response.content.decode('utf-8')
    assert "dark" in content, "–¢–µ–º–∞ –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

def test_feedback_routes(client):
    """–¢–µ—Å—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    response = client.get('/feedback/')
    assert response.status_code == 200
    content = response.content.decode('utf-8')
    assert "–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏" in content
    
    response_thanks = client.get('/feedback/thanks/')
    assert response_thanks.status_code == 200
    content_thanks = response_thanks.content.decode('utf-8')
    assert "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤" in content_thanks

def test_review_detail(client):
    """–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å re_path"""
    response = client.get('/book/du-312/reviews/42/')
    assert response.status_code == 200, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}, –æ–∂–∏–¥–∞–ª—Å—è 200"
    content = response.content.decode('utf-8')
    assert "–û—Ç–∑—ã–≤ #42 –∫ –∫–Ω–∏–≥–µ 'du-312'" in content, f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ª—É—á–µ–Ω–æ: {content}"

if __name__ == '__main__':
    test_lab()